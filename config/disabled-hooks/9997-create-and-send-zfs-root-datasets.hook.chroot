#!/bin/bash

# Based on the following procedure:  https://github.com/zfsonlinux/zfs/wiki/Debian-Buster-Root-on-ZFS

# Notes:
#  * The rationale behind a separate boot pool is that it allows the enable feature flags to be limited to only those
#    supported by GRUB
DEBUNTU_DISTNAME=buster
ZFS_TMP_RPOOL_IMAGE_NAME=tmp_rpool.img
ZFS_TMP_BPOOL_IMAGE_NAME=tmp_bpool.img
ZFS_TMP_RPOOL_IMAGE_SIZE_MB=8192
ZFS_TMP_BPOOL_IMAGE_SIZE_MB=1024
ZFS_TMP_RPOOL_NAME=tmp_rpool
ZFS_TMP_BPOOL_NAME=tmp_bpool
TARGET_DIRNAME=$(pwd)/mnt
# Use standard zpool create syntax: '-o ashift=12 -o altroot=/foo/bar -o ...'
#FIXME: do we need more than that?
# Create the boot pool with _only_ the options supported by GRUB
ZFS_TMP_BPOOL_CREATION_OPTS="-o ashift=12 -d \
    -o feature@async_destroy=enabled \
    -o feature@bookmarks=enabled \
    -o feature@embedded_data=enabled \
    -o feature@empty_bpobj=enabled \
    -o feature@enabled_txg=enabled \
    -o feature@extensible_dataset=enabled \
    -o feature@filesystem_limits=enabled \
    -o feature@hole_birth=enabled \
    -o feature@large_blocks=enabled \
    -o feature@lz4_compress=enabled \
    -o feature@spacemap_histogram=enabled \
    -o feature@userobj_accounting=enabled \
    -o feature@zpool_checkpoint=enabled \
    -o feature@spacemap_v2=enabled \
    -o feature@project_quota=enabled \
    -o feature@resilver_defer=enabled \
    -o feature@allocation_classes=enabled \
    -R ${TARGET_DIRNAME}"
ZFS_TMP_RPOOL_CREATION_OPTS="-o ashift=12 -R ${TARGET_DIRNAME}"
# Use standard zpool create syntax: '-O compression=lz4 -O recordsize=1M -O ...'
# Use `zfs send --raw ...` to send encrypted data, and large, embeded or compressed records.
ZFS_TMP_BPOOL_TOPLEVEL_DATASET_OPTS="-O acltype=posixacl -O canmount=off -O compression=lz4 -O devices=off \
    -O normalization=formD -O relatime=on -O xattr=sa \
    -O mountpoint=/"
ZFS_TMP_RPOOL_TOPLEVEL_DATASET_OPTS="-O compression=gzip-9 -O recordsize=1M -O acltype=posixacl -O canmount=off \
    -O dnodesize=auto -O normalization=formD -O relatime=on -O xattr=sa -O mountpoint=/"
ZFS_SEND_CMD="zfs send --dedup --raw --replicate"
EXPORT_SNAPSHOT_NAME=to_export
BPOOL_STREAM_PKG_NAME=${DEBUNTU_DISTNAME}-boot.zfs
RPOOL_STREAM_PKG_NAME=${DEBUNTU_DISTNAME}-root.zfs

# Track the devices this script created with `losetup`
declare -a LOOPDEVS

# $@: a list of ZFS pools to be exported
export_pools(){
  # shellcheck disable=SC2068
  for pool in $@; do
    if zpool list "$pool"; then
      zpool export "$pool"
    fi
  done
}

cleanup(){
  set +e
  echo "$(basename "$0") cleaning up..."
  export_pools "$ZFS_TMP_RPOOL_NAME" "$ZFS_TMP_BPOOL_NAME"
  if [ ${#LOOPDEVS[@]} -gt 0 ]; then
    # shellcheck disable=SC2068
    losetup -d ${LOOPDEVS[@]}
  fi
  rm -f $ZFS_TMP_RPOOL_IMAGE_NAME $ZFS_TMP_BPOOL_IMAGE_NAME
  rm -rf $TARGET_DIRNAME
}

trap cleanup EXIT
set -e # Immediately exit if any of the following commands fail

dd if=/dev/zero of=$ZFS_TMP_BPOOL_IMAGE_NAME bs=1M count=$ZFS_TMP_BPOOL_IMAGE_SIZE_MB
TMP_BPOOL_LOOPDEV=$(losetup -f $ZFS_TMP_BPOOL_IMAGE_NAME --show)
LOOPDEVS[${#LOOPDEVS[@]}]=$TMP_BPOOL_LOOPDEV
zpool create $ZFS_TMP_BPOOL_CREATION_OPTS $ZFS_ZFS_BPOOL_TOPLEVEL_DATASET_OPTS $ZFS_TMP_BPOOL_NAME $TMP_BPOOL_LOOPDEV

dd if=/dev/zero of=$ZFS_TMP_RPOOL_IMAGE_NAME bs=1M count=$ZFS_TMP_RPOOL_IMAGE_SIZE_MB
TMP_RPOOL_LOOPDEV=$(losetup -f $ZFS_TMP_RPOOL_IMAGE_NAME --show)
LOOPDEVS[${#LOOPDEVS[@]}]=$TMP_RPOOL_LOOPDEV
zpool create $ZFS_TMP_RPOOL_CREATION_OPTS $ZFS_TMP_RPOOL_TOPLEVEL_DATASET_OPTS $ZFS_TMP_RPOOL_NAME $TMP_RPOOL_LOOPDEV

zfs create -o canmount=off -o mountpoint=none $ZFS_TMP_BPOOL_NAME/BOOT
zfs create -o canmount=off -o mountpoint=none $ZFS_TMP_RPOOL_NAME/ROOT

zfs create -o canmount=noauto -o mountpoint=/ $ZFS_TMP_RPOOL_NAME/ROOT/debian
zfs mount rpool/ROOT/debian

zfs create -o canmount=noauto -o mountpoint=/boot $ZFS_TMP_BPOOL_NAME/BOOT/debian
zfs mount bpool/BOOT/debian

zfs create                                 $ZFS_TMP_RPOOL_NAME/home
zfs create -o mountpoint=/root             $ZFS_TMP_RPOOL_NAME/home/root
zfs create -o canmount=off                 $ZFS_TMP_RPOOL_NAME/var
zfs create -o canmount=off                 $ZFS_TMP_RPOOL_NAME/var/lib
zfs create                                 $ZFS_TMP_RPOOL_NAME/var/log
zfs create                                 $ZFS_TMP_RPOOL_NAME/var/spool
zfs create -o com.sun:auto-snapshot=false  $ZFS_TMP_RPOOL_NAME/var/cache
zfs create -o com.sun:auto-snapshot=false  $ZFS_TMP_RPOOL_NAME/var/tmp
chmod 1777 "${TARGET_DIRNAME}/var/tmp"
zfs create -o com.sun:auto-snapshot=false  $ZFS_TMP_RPOOL_NAME/tmp
chmod 1777 "${TARGET_DIRNAME}/tmp"

echo "$(basename "$0") preparing $DEBUNTU_DISTNAME root datasets..."
debootstrap $DEBUNTU_DISTNAME "${TARGET_DIRNAME}"
zfs set devices=off $ZFS_TMP_RPOOL_NAME

zfs snapshot -r ${ZFS_TMP_BPOOL_NAME}@${EXPORT_SNAPSHOT_NAME}
zfs snapshot -r ${ZFS_TMP_RPOOL_NAME}@${EXPORT_SNAPSHOT_NAME}

echo "$(basename "$0") packaging $DEBUNTU_DISTNAME root datasets..."
$ZFS_SEND_CMD ${ZFS_TMP_BPOOL_NAME}@${EXPORT_SNAPSHOT_NAME} > $BPOOL_STREAM_PKG_NAME &
BPOOL_SEND_PID=$!
$ZFS_SEND_CMD ${ZFS_TMP_RPOOL_NAME}@${EXPORT_SNAPSHOT_NAME} > $RPOOL_STREAM_PKG_NAME &
RPOOL_SEND_PID=$!
wait $BPOOL_SEND_PID $RPOOL_SEND_PID

#FIXME: reinstate exit trap after testing
trap - EXIT